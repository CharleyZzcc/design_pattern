23种设计模式
	1.创建型（5）
		1）工厂方法模式（factory method pattern）	普通工厂方法——>多个工厂方法——>静态工厂方法
		2）抽象工厂模式（abstract factory pattern）	抽象工厂创建抽象对象，具体工厂返回具体的对象
		3）单例模式（singleton pattern）			饿汉式、懒汉式（创建对象考虑线程安全）
		4）创建者模式（builder pattern）			内部静态类提供创建主类对象
		5）原型模式（prototype pattern）			浅层克隆、深层克隆（IO流+序列化）
	2.结构型（7）
		1）适配器模式（adapter pattern）
			类适配器：继承被适配的类，实现扩展类
			对象适配器：实现扩展类，主类内部引用被适配的类
			接口适配器：抽象类空实现接口，具体类选择性重写抽象类方法
		2）装饰器模式（decorator pattern）
			被装饰对象和装饰对象实现同一接口，装饰对象提供构造器注入或setter注入该接口（的实现类），参照IO流
		3）代理模式（proxy pattern）
			静态代理：代理类实现被代理接口，在内部创建被代理的实现
			动态代理：
				基于jdk的动态代理工厂：利用反射（Proxy.newProxyInstance），目标对象是接口的实现
				基于cglib的动态代理工厂：实现MethodInterceptor，重写intercept，目标对象可以没有要实现的接口
		4）桥接模式（bridge pattern）
			抽象类关联实现类接口，提供抽象方法；扩展类实现抽象方法，结合具体实现类的方法（有点绕，建议结合图像和代码）
		5）复合（组合）模式（composite pattern）
			多个类实现共同接口，其中一个实现类具有存储和获取接口实现对象的能力
		6）外观（门面）模式（facade pattern）
			各个独立类实现同一接口，门面类组合这些独立类，共同调用相同方法（可以想象主板统一调度各个模块）
		7）享元模式（flyweight pattern）
			享元接口+具体实现（含外部状态方法），享元模式工厂提供共享对象（根据内部状态创建和存储共享对象）。参照数据库连接池
	3.行为型（11）
		1）模板方法模式（template pattern）
			抽象类提供抽象方法和固定引用这些方法的模板方法，子类只要实现抽象方法即可
		2）策略模式（strategy pattern）
			组合对象提供逻辑抽象接口（方法），委托注入的对象实现（参照Comparator接口与TreeSet类）
		3）状态模式（state pattern）
			状态逻辑接口和动作实现，动作实现类的执行方法可以改变状态逻辑（具体状态逻辑类提供状态逻辑）
		4）观察者模式（observer pattern）
			观察者与被观察者相互联系，被观察者发生变化，观察者随即观察到变化（被动），如数据和以数据为基础的图表。jdk自带。
		5）备忘录模式（memento pattern）
			将要备忘的成员属性同样封装成一个类，在主类中提供以封装类为基础的getter、setter方法再封装
		6）中介模式（mediator pattern）
			请求者之间通过中介进行通信（中介注册请求者，请求者关联中介，请求者实现类发出请求信息，中介告知其它请求者。
			说人话：租客跟中介说租房信息，中介告诉房东，房东告诉中介房子信息，中介告诉租客）
		7）命令模式（command pattern）
			命令执行者——>命令执行——>命令接收者 执行
		8）访问者模式（visitor pattern）
			访问者和被访者接口皆存在于对方之中，由被访问者率先接受访问者
		9）责任链模式（CoR，chain of responsibility pattern）
			责任链实现一接口，注册其它实现该接口的对象，接口方法传递请求和责任链；
			接口实现对象能自己解决就解决，不能解决就向下传递。参照FilterChain
		10）迭代器模式（iterator pattern）
			迭代器接口+容器接口，容器提供自身的迭代器，具体容器提供具体的迭代器，一一对应。参照jdk集合类和迭代器
		11）解释器模式（interpreter pattern）
			表达式接口有终结表达式和非终结表达式实现类，终结符存储在环境对象中
			（表达式a=b+c，其中b、c属于终端符，+属于非终结符）
			
---------------------------------------------------------------------------
	代码说明：代码只是简单实现模式的思路，不太考虑健壮性和并发问题（结构型和行为型）
	
	个人觉得以上模式的难易程度为：易	创建型——>结构型——>行为型		难（比较抽象）